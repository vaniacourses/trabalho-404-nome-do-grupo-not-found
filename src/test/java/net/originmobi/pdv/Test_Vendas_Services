import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
 
@ExtendWith(MockitoExtension.class)
class VendaServiceTest {
 
    @InjectMocks
    private VendaService vendaService;
 
    @Mock
    private VendaRepository vendas;
 
    @Mock
    private ReceberService receberServ;
 
    @Mock
    private ParcelasService parcelas;
 
    @Mock
    private LancamentosService lancamentos;
 
    @Mock
    private ProdutosService produtos;
 
    @Mock
    private Venda vendaMock;
 
    @BeforeEach
    void setUp() {
        // Configura o mock da venda como fechada (isAberta() == false)
        when(vendaMock.isAberta()).thenReturn(false);
    }
 
    @Test
    void testFechamentoVendaJaFechada() {
        // Arrange
        Long vendaId = 1L;
 
        when(vendas.findByCodigoEquals(vendaId)).thenReturn(vendaMock);
 
        // Act & Assert
        RuntimeException thrown = assertThrows(RuntimeException.class, () -> {
            vendaService.fechaVenda(vendaId, 1L, 100.0, 0.0, 0.0, new String[]{}, new String[]{});
        });
 
        assertEquals("venda fechada", thrown.getMessage());
 
        // Verifica que nenhum outro servi√ßo foi chamado
        verifyNoInteractions(receberServ, parcelas, lancamentos, produtos);
        verify(vendas, never()).fechaVenda(anyLong());
    }
}
